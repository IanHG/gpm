-- Load globally installed packages
local argparse = assert(require "argparse")

-- Load local packages
local exception  = assert(require "lib.exception")
local path       = assert(require "lib.path")
local version    = assert(require "lib.version")
local util       = assert(require "lib.util")
local logging    = assert(require "lib.logging")
local logger     = logging.logger
local ansicolor  = assert(require "lib.ansicolor")
local configload = assert(require "lib.configload")
local filesystem = assert(require "lib.filesystem")
local database   = assert(require "lib.database")
local hwdetect   = assert(require "lib.hwdetect.hwdetect")

-- Description of this script
local description = version.get_description("gpm-detect")

--- Show architecture
--
local function show_arch()
   --local cpu_local = hwsystem.detect_cpu()
   --cpu_local:print()

   --local gpu_local = hwsystem.detect_gpu()
   --gpu_local:print()

   --local mem_local = hwsystem.detect_mem()
   --mem_local:print()

   local hw_info = hwdetect.detect_hw()
   hw_info.cpu_info:print()
   hw_info.gpu_info:print()
   hw_info.mem_info:print()
   hw_info.net_info:print()
end

--- Net
local function command_net(args)
   local net_info = hwdetect.net.create_net_info()
   
   if args.fast then
      hwdetect.net.detect_fast(net_info)

      if args.ib then
         if net_info.mellanox_infiniband_detected then
            logger:message(net_info.mellanox_infiniband_detected)
            os.exit(0)
         else
            logger:message(net_info.mellanox_infiniband_detected)
            os.exit(1)
         end
      else
         if not util.isempty(args.port) then
            for k, v in pairs(args.port) do
               local port = "Port " .. tostring(v)
               if net_info.ib then
                  if net_info.ib.ports[port] then
                     logger:message("  IB " .. port)
                     for kinner, vinner in pairs(net_info.ib.ports[port]) do
                        logger:message("      " .. kinner .. " : " .. vinner)
                     end
                     os.exit(0)
                  end
               end

               logger:alert(port .. " not detected.")
               os.exit(1)
            end
         else
            net_info:print()
         end
      end
   else
      hwdetect.net.detect_interfaces(net_info)
      
      net_info:print()
   end

   --net_info:print()
end

local function command_mem(args)
   local mem_info = hwdetect.mem.detect_mem()
   
   mem_info:print(args)
end

--- Main driver.
function main()
   -- Arg parser
   local parser = argparse(description.script_name, description.name .. ":\n" .. description.desc)
   
   -- Commands
   local parser_arch = parser:command("arch") 
   
   -- Some general arguments
   parser:option("-c --config", "Provide config file."):overwrite(false)
   parser:option("-t --token"   , "Set a stack token."):overwrite(false)
   parser:flag("--debug", "Print debug information (mostly for developers).")
   parser:flag("--quiet", "Do not print anything to stdout.")
   parser:flag("--fancy", "Print fancy output.")
   parser:flag("-v --version", "Print '" .. version.get_version() .. "' and exit."):action(function()
      print(version.get_version())
      os.exit(0)
   end)
   
   -- arch specific
   --parser_arch:flag("-a --all"   , "List all available stacks."):overwrite(false)
   
   -- Net parser
   local parser_net  = parser:command("net")
   parser_net:require_command(false)
   local parser_net_fast = parser_net:command("fast", "Detect fast network.")
   parser_net_fast:flag  ("--ib",   "Check for infiniband.")
   parser_net_fast:option("--port", "Print only for specific ports (default print for all ports)."):count("*")
   
   -- Mem parser
   local parser_mem       = parser:command("mem")
   parser_mem:require_command(false)
   parser_mem:option("-c --convert", "Convert to B, kB, MB, GB, TB, or PB.", "kB"):overwrite(false)
   parser_mem:flag("--no-suffix", "Do not print unit suffix, only numeric value.")
   parser_mem:argument("thing", "Thingy to print :D"):args("?")
      
   -- Parse arguments
   args = parser:parse()
   
   if args.debug then
      logger:debug("Lua version : " .. _VERSION, "fancy", io.stdout)
      logger:debug(util.print(args, "args")    , "fancy", io.stdout)
   end

   --settings.initialize(args)
   
   exception.try(function()
      -- Bootstrap config
      configload.bootstrap(nil, args, {}, true)

      if args.arch then
         show_arch()
      elseif args.net then
         command_net(args)
      elseif args.mem then
         command_mem(args)
      end
   end, function(e)
      -- Print exception
      exception.message(e)
         
      -- Print usage
      print("\n" .. parser:get_usage())

      -- Exit with non zero status
      os.exit(1)
   end)
end

--[[
# vi:syntax=lua
--]]
