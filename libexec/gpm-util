-- Load globally installed packages
local argparse = assert(require "argparse")

-- Load local packages
local exception  = assert(require "lib.exception")
local path       = assert(require "lib.path")
local version    = assert(require "lib.version")
local util       = assert(require "lib.util")
local logging    = assert(require "lib.logging")
local ansicolor  = assert(require "lib.ansicolor")
local configload = assert(require "lib.configload")
local filesystem = assert(require "lib.filesystem")
local database   = assert(require "lib.database")
local hwsystem   = assert(require "lib.system.system")

-- Description of this script
local description = version.get_description("gpm-stack.lua")

--- Show architecture
--
local function show_arch()
   --local cpu_local = hwsystem.detect_cpu()
   --cpu_local:print()

   --local gpu_local = hwsystem.detect_gpu()
   --gpu_local:print()

   --local mem_local = hwsystem.detect_mem()
   --mem_local:print()

   local hw_info = hwsystem.detect_hw()
   hw_info.cpu_info:print()
   hw_info.gpu_info:print()
   hw_info.mem_info:print()

end

--- Main driver.
function main()
   -- Arg parser
   local parser = argparse(description.script_name, description.name .. ":\n" .. description.desc)
   
   -- Commands
   local parser_arch = parser:command("arch") 
   
   -- Some general arguments
   parser:option("-c --config", "Provide config file."):overwrite(false)
   parser:option("-t --token"   , "Set a stack token."):overwrite(false)
   parser:flag("--debug", "Print debug information (mostly for developers).")
   parser:flag("-v --version", "Print '" .. version.get_version() .. "' and exit."):action(function()
      print(version.get_version())
      os.exit(0)
   end)
   
   -- arch specific
   --parser_ls:flag("-a --all"   , "List all available stacks."):overwrite(false)
      
   -- Parse arguments
   args = parser:parse()
   
   if args.debug then
      logging.debug("Lua version : " .. _VERSION, io.stdout)
      logging.debug(util.print(args, "args"), io.stdout)
   end
   
   exception.try(function()
      -- Bootstrap config
      configload.bootstrap(nil, args, {}, true)

      if args.arch then
         show_arch()
      end
      
   end, function(e)
      -- Print exception
      exception.message(e)
         
      -- Print usage
      print("\n" .. parser:get_usage())

      -- Exit with non zero status
      os.exit(1)
   end)
   
   
end

--[[
# vi:syntax=lua
--]]
