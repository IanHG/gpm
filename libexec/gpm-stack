-- Load globally installed packages
local argparse = assert(require "argparse")

-- Load local packages
local exception  = assert(require "lib.exception")
local path       = assert(require "lib.path")
local version    = assert(require "lib.version")
local util       = assert(require "lib.util")
local logging    = assert(require "lib.logging")
local ansicolor  = assert(require "lib.ansicolor")
local configload = assert(require "lib.configload")
local filesystem = assert(require "lib.filesystem")
local database   = assert(require "lib.database")

-- Description of this script
local description = version.get_description("gpm-stack.lua")

--- Print the currently loaded stacks.
--
local function lsloaded()
   -- Define which logs to print to
   local logs = {io.stdout}

   -- Just print a new line to get the first line down a bit... (purely for visual purposes)
   logging.message("", logs)

   -- Print the stack we are currently installing into
   logging.message("Currently installing in:"                        , logs)
   logging.message("   Stack  : '" .. global_config.stack_name .. "'", logs)
   logging.message("   Path   : "  .. global_config.stack_path       , logs)
   logging.message("   Config : "  .. global_config.this_path        , logs)
   logging.message(""                                                , logs)

   -- Print currently loaded stacks
   logging.message("Currently loaded stacks: ", logs)
   local stackpath = os.getenv("GPMSTACKPATH")
   for p in path.iterator(stackpath) do
      logging.message("     " .. p, logs)
   end
   logging.message("", logs)
end

--- Print all available stacks
--
local function lsall()
   -- Define which logs to print to
   local logs = {io.stdout}
   
   -- Just print a new line to get the first line down a bit... (purely for visual purposes)
   logging.message("", logs)
   
   -- Define local function for recursive loading of database
   function recursive_load_db(config)
      -- Load childstack database
      database.load_db(config, {"childstack"})
      
      -- Recursively check for parents
      if config.meta_stack then
         if config.meta_stack.parent then
            if type(config.meta_stack.parent) == "table" then
               for _, v in pairs(config.meta_stack.parent) do
                  recursive_load_db(configload.bootstrap(v, nil, {}, false))
               end
            else
               recursive_load_db(configload.bootstrap(config.meta_stack.parent, nil, {}, false))
            end
         end
      end
   end
   
   -- Call recursive load
   recursive_load_db(global_config)

   -- Get the childstack database
   local db = database.get_db("childstack")
   
   -- Printout
   local format = "%-20s %-20s"
   logging.message(string.format(format, "Stack name", "Load command"), logs)
   logging.message("---------------------------------------------------------------", logs)
   for _, v in pairs(db) do
      local child_config = configload.bootstrap(v.config, nil, {}, false)
      local load_command = "source " .. child_config.stack_path .. "/bin/modules.sh"
      logging.message(string.format(format, child_config.stack_name, load_command), logs)
   end
   logging.message("", logs)
end

--- Grep in log file and print hits to terminal.
--
local function grepcmd(args)
   local result = logging.grep(args.grep, global_config.log_path)
   for _,line in pairs(result) do
      io.stdout:write(line .. "\n")
   end
end

---
--
local function list_installed_packages()
   database.load_db(global_config)
   database.list_installed()
end

--- Main driver.
function main()
   -- Arg parser
   local parser = argparse(description.script_name, description.name .. ":\n" .. description.desc)
   
   -- Commands
   local parser_load = parser:command("load") 
   local parser_ls   = parser:command("ls")
   local parser_list = parser:command("list")
   local parser_log  = parser:command("log")
   
   -- Some general arguments
   parser:option("-c --config", "Provide config file."):overwrite(false)
   parser:flag("--debug", "Print debug information (mostly for developers).")
   parser:flag("-v --version", "Print '" .. version.get_version() .. "' and exit."):action(function()
      print(version.get_version())
      os.exit(0)
   end)
   
   -- load specific

   -- ls specific
   parser_ls:flag("-a --all"   , "List all available stacks."):overwrite(false)
   parser_ls:flag("-l --loaded", "List currently loaded stacks."):overwrite(false)
      
   -- list specific

   -- show specific
   parser_log:option("-g --grep"   , "Grep in log file for string."):overwrite(false):args("*")
   
   -- Parse arguments
   args = parser:parse()
   
   if args.debug then
      logging.debug("Lua version : " .. _VERSION, io.stdout)
      logging.debug(util.print(args, "args"), io.stdout)
   end
   
   exception.try(function()
      -- Bootstrap config
      configload.bootstrap(nil, args, {}, true)

      if args.ls then
         if args.all then
            lsall()
         elseif args.loaded then
            lsloaded()
         end
      elseif args.log then
         if args.grep then
            grepcmd(args)
         end
      elseif args.list then
         list_installed_packages()
      end
      
   end, function(e)
      -- Print exception
      exception.message(e)
         
      -- Print usage
      print("\n" .. parser:get_usage())

      -- Exit with non zero status
      os.exit(1)
   end)
   
   
end

--[[
# vi:syntax=lua
--]]
