-- Load globally installed packages
local lfs      = require "lfs"
local argparse = require "argparse"

-- Load local packages
local exception  = require "lib.exception"
local path       = require "lib.path"
local version    = require "lib.version"
local util       = require "lib.util"
local logging    = require "lib.logging"
local ansicolor  = require "lib.ansicolor"
local configload = require "lib.configload"
local filesystem = require "lib.filesystem"

-- Description of this script
local description = version.get_description("gpm-stack.lua")

--- Print the currently loaded stacks.
--
local function lsloaded()
   -- Just print a new line to get the first line down a bit... (purely for visual purposes)
   logging.message("", io.stdout)

   -- Print the stack we are currently installing into
   local installpath = os.getenv("GPM_CONFIG")
   logging.message("Currently installing in: " .. installpath .. "\n", io.stdout)

   -- Print currently loaded stacks
   logging.message("Currently loaded stacks: \n", io.stdout)
   local stackpath = os.getenv("GPMSTACKPATH")
   for p in path.iterator(stackpath) do
      logging.message("     " .. p, io.stdout)
   end
   logging.message("", io.stdout)
end

--- Grep in log file and print hits to terminal.
--
local function grepcmd(args)
   local result = logging.grep(args.grep, config.log_path)
   for _,line in pairs(result) do
      io.stdout:write(line .. "\n")
   end
end

--- Main driver.
function main()
   -- Arg parser
   local parser = argparse(description.script_name, description.name .. ":\n" .. description.desc)
   
   -- Commands
   local parser_load = parser:command("load") 
   local parser_ls   = parser:command("ls")
   local parser_log  = parser:command("log")
   
   -- Some general arguments
   parser:option("-c --config", "Provide config file."):overwrite(false)
   parser:flag("--debug", "Print debug information (mostly for developers).")
   parser:flag("-v --version", "Print '" .. version.get_version() .. "' and exit."):action(function()
      print(version.get_version())
      os.exit(0)
   end)
   
   -- load specific

   -- ls specific
   parser_ls:flag("-a --all"   , "List all available stacks."):overwrite(false)
   parser_ls:flag("-l --loaded", "List currently loaded stacks."):overwrite(false)
   
   -- show specific
   parser_log:option("-g --grep"   , "Grep in log file for string."):overwrite(false):args("*")
   
   -- Parse arguments
   args = parser:parse()
   
   if args.debug then
      logging.debug("Lua version : " .. _VERSION, io.stdout)
      logging.debug(util.print(args, "args"), io.stdout)
   end
   
   exception.try(function()
      -- Bootstrap config
      config = configload.bootstrap(args, config)

      if args.ls then
         if args.all then
            print("ALL")
         elseif args.loaded then
            lsloaded()
         end
      elseif args.log then
         if args.grep then
            grepcmd(args)
         end
      end
      
   end, function(e)
      -- Print exception
      exception.message(e)
         
      -- Print usage
      print("\n" .. parser:get_usage())

      -- Exit with non zero status
      os.exit(1)
   end)
   
   
end

--[[
# vi:syntax=lua
--]]
