#!/usr/bin/lua

-- Load globally installed packages
local lfs = require "lfs"
local argparse = require "argparse"

-- Load local packages
folder_of_this = arg[0]:match("(.-)[^\\/]+$") -- Get folder of executeable
if folder_of_this:sub(1,1) ~= "/" then
   folder_of_this = lfs.currentdir() .. "/" .. folder_of_this
end
package.path = folder_of_this .. '../lib/?.lua;' .. package.path -- Set package path
local exception = require "exception"
local path = require "path"
local version = require "version"
local stack = require "stack"
local install = require "install"
local initializer = require "initialize"
local util = require "util"

-- Description of this script
description = {
   script_name = "gpm-package.lua",
   name = "Grendel Package Manager 2000 (GPM2K), or just GPM for short :)",
   desc = "Grendels own easybuilder, yay!",
}

-- Set config defaults
config = {  
   current_directory = lfs.currentdir(),  
   gpk_directory = folder_of_this .. "../gpk",
   gps_directory = folder_of_this .. "../gps",
   heirarchical = {},
}

-------------------------------------
-- Is pkgtype a hierarchical one?
--
-- @param{String} pkgtype
--
-- @param{Boolean} 
-------------------------------------
function is_heirarchical(pkgtype)
   for key,value in pairs(config.heirarchical) do
      if pkgtype == value then
         return true
      end
   end
   return false
end

-------------------------------------
-- Read GPM package file (GPK).
--
-- @return{Dictionary} Returns definition og build.
-------------------------------------
local function bootstrap_config(args, default_config)
   if args.debug then
      print("Bootstrapping config.")
   end

   if not args.config then
      args.config = path.join(config.current_directory, "config.lua")
   end

   assert(loadfile(args.config))()

   default_config = util.merge(default_config, config)

   if not default_config.base_build_directory then default_config.base_build_directory = default_config.install_directory .. "/build" end
   if not default_config.lmod_directory then default_config.lmod_directory = default_config.install_directory .. "/modulefiles" end

   return default_config
end



-------------------------------------
-- Main driver.
-------------------------------------
function main()
   -- Arg parser
   local parser = argparse(description.script_name, description.name .. ":\n" .. description.desc)
   
   -- Commands
   local parser_initialize = parser:command("initialize") -- Initialize a Lmod setup
   local parser_install = parser:command("install")
   local parser_remove = parser:command("remove")
   local parser_stack = parser:command("stack")
   
   -- Some general arguments
   parser:option("-c --config", "Provide config file."):overwrite(false)
   parser:flag("--debug", "Print debug information (mostly for developers).")
   parser:flag("-v --version", "Print '" .. version.get_version() .. "' and exit."):action(function()
      print(version.get_version())
      os.exit(0)
   end)

   -- Initialize specific
   parser_initialize:option("--parentstack", "Paths to source as GPM parent stacks. Give as comma-separated list."):overwrite(false)
   
   -- Install specific
   parser_install:mutex(
      parser_install:option("--gpk" , "GPM Package (GPK) to install/remove (will look for .gpk file)."):overwrite(false),
      parser_install:option("--gpkf", "GPM Package (GPK) file to install/remove."):overwrite(false)
   )
   parser_install:option("--pkv", "Set Package Version (PKV) of the package to install/remove."):overwrite(false)
   parser_install:option("--prereq", "Set pre-requisites. Example --prereq='compiler=gcc/7.1.0,mpi=openmpi/2.1.1'."):overwrite(false)
   parser_install:flag("--no-build", "Do not build package.")
   parser_install:flag("--no-lmod", "Do not create Lmod script.")
   parser_install:flag("--cleanup", "Cleanup by removing build directory after build is complete.")

   -- Remove specific
   
   -- Stack specific
   parser_stack:mutex(
      parser_stack:option("--gps" , "GPM Stack (GPS) to install (will look for .gps file)."):overwrite(false),
      parser_stack:option("--gpsf", "GPM Stack (GPS) file to install."):overwrite(false)
   )
   parser_stack:flag("--cleanup", "Cleanup by removing build directory after build is complete.")
   parser_stack:flag("--no-build", "Do not build packages.")
   parser_stack:flag("--no-lmod", "Do not create Lmod scripts.")
   
   -- Parse arguments
   args = parser:parse()
   if args.debug then
      util.print(args, "args")
   end
   
   exception.try(function()
      -- Bootstrap config
      config = bootstrap_config(args, config)
      
      -- Switch on command
      if args.initialize then
         -- Initialize command
         initializer.initialize(args)
      elseif args.install then
         -- Install command
         install.install(args)
      elseif args.remove then
         -- Remove Command
         error("REMOVE NOT IMPLEMENTED YET :C")
      elseif args.stack then
         -- Stack command
         stack.stack(args)
      end
   end, function(e)
      exception.message(e)
      print("\n" .. parser:get_usage())
   end)
   
   
end

-- Run main driver.
main()

--[[
# vi:syntax=lua
--]]
